# 此文件描述了Span的tag和log键的标准取值，以及相关约定
#
# OpenTracing API可以解析这份文件，生成相应的文件和注释。
#
# 修改这份文件会影响OpenTracing标准的版本号。
# 增加内容会引起小版本号增加，无法向前兼容的修改（或者大批量的增加）应该增加大版本号。
#
# 译者注：考虑到此文件内容中大量的英语单词为行业标准词汇，为了阅读方便，只会对其中较为复杂的内容进行翻译


standard_tags:

    #####################################################################
    # General tags
    #####################################################################

    'error':
        type: bool
        comment: '"true" if and only if the associated Span is in an error state'

    'component':
        type: string
        comment: 'The software package, framework, library, or module that generated the associated Span'
        examples: '"grpc", "django", "JDBI"'

    'sampling.priority':
        type: integer
        comment: 'If greater than 0, a hint to the Tracer to do its best to capture the trace. If 0, a hint to the trace to not-capture the trace. If absent, the Tracer should use its default sampling mechanism.'
        examples: '0, 1'


    #####################################################################
    # HTTP tags
    #####################################################################

    'http.url':
        type: string
        comment: 'URL of the request being handled in this segment of the trace, in standard URI format'
        examples: '"https://domain.net/path/to?resource=here"'

    'http.method':
        type: string
        comment: 'HTTP method of the request for the associated Span'
        examples: '"GET", "POST"'

    'http.status_code':
        type: integer
        comment: 'HTTP response status code for the associated Span'
        examples: '200, 503, 404'


    #####################################################################
    # RPC tags
    #####################################################################

    'span.kind':
        type: string
        comment: 'Either "client" or "server" for the appropriate roles in an RPC'
        examples: '"client", "server"'

    'peer.hostname':
        type: string
        comment: 'Remote hostname'
        examples: '"opentracing.io", "internal.dns.name"'

    'peer.ipv4':
        type: string
        comment: 'Remote IPv4 address as a .-separated tuple'
        examples: '"127.0.0.1"'

    'peer.ipv6':
        type: string
        comment: 'Remote IPv6 address as a string of colon-separated 4-char hex tuples'
        examples: '"2001:0db8:85a3:0000:0000:8a2e:0370:7334"'

    'peer.port':
        type: integer
        comment: 'Remote port'
        examples: '80'

    'peer.service':
        type: string
        comment: 'Remote service name (for some unspecified definition of "service")'
        examples: '"elasticsearch", "a_custom_microservice", "memcache"'

standard_log_fields:
    'event':
        type: string
        comment: 'A stable identifier for some notable moment in the lifetime of a Span. For instance, a mutex lock acquisition or release or the sorts of lifetime events in a browser page load described in the [Performance.timing](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming) specification.'
        examples: 'From Zipkin, "cs", "sr", "ss", or "cr". Or, more generally, "initialized" or "timed out". For errors, "error"'

    'message':
        type: string
        comment: 'A concise, human-readable, one-line message explaining the event'
        examples: '"Could not connect to backend", "Cache invalidation succeeded"'

    'stack':
        type: string
        comment: 'A stack trace in platform-conventional format; may or may not pertain to an error'
        examples: '"File \"example.py\", line 7, in <module>\ncaller()\nFile \"example.py\", line 5, in caller\ncallee()\nFile \"example.py\", line 2, in callee\nraise Exception(\"Yikes\")\n"'


    ###########################################################################
    # 错误信息说明
    #
    # 根据语言不同，向OpenTracing报告错误的方式也有所区别。
    # 某些字段是专门针对上报错误的，有一些字段（如`event`, `message`）则不是。
    #
    # 如果该语言的error对象包含栈信息和错误类型，则log操作中，使用使用以下字段：
    #  - event="error"
    #  - error.object=<error object instance>
    #
    # 如果不存在这种类型的对象，或无法构建这样的对象，则log操作中，使用使用以下字段：
    #  - event="error"
    #  - message="..."
    #  - stack="..." (optional)
    #  - error.kind="..." (optional)
    #
    # 通过这种模式，保证Tracer可以在错误发生后，通过统一的方式，获取这些错误信息。
    ###########################################################################

    'error.object':
        type: object
        comment: 'For languages that support such a thing (e.g., Java, Python), the actual Throwable/Exception/Error object instance itself.'
        examples: 'A java.lang.UnsupportedOperationException instance, a python exceptions.NameError instance'

    'error.kind':
        type: string
        comment: 'The type or "kind" of an error (only for "event"="error" logs)'
        examples: '"Exception", "OSError"'
